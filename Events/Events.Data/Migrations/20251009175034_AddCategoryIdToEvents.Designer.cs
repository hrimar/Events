// <auto-generated />
using System;
using Events.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Events.Data.Migrations
{
    [DbContext(typeof(EventsDbContext))]
    [Migration("20251009175034_AddCategoryIdToEvents")]
    partial class AddCategoryIdToEvents
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Events.Models.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DefaultImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryType");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryType = 1,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(4898),
                            Description = "Musical events and concerts",
                            Name = "Music"
                        },
                        new
                        {
                            Id = 2,
                            CategoryType = 2,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(4901),
                            Description = "Art exhibitions and shows",
                            Name = "Art"
                        },
                        new
                        {
                            Id = 3,
                            CategoryType = 3,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(4903),
                            Description = "Business conferences and networking",
                            Name = "Business"
                        },
                        new
                        {
                            Id = 4,
                            CategoryType = 4,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(4904),
                            Description = "Sports events and competitions",
                            Name = "Sports"
                        },
                        new
                        {
                            Id = 5,
                            CategoryType = 5,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(4905),
                            Description = "Theatre performances and plays",
                            Name = "Theatre"
                        },
                        new
                        {
                            Id = 6,
                            CategoryType = 6,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(4906),
                            Description = "Movie screenings and film festivals",
                            Name = "Cinema"
                        },
                        new
                        {
                            Id = 7,
                            CategoryType = 7,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(4907),
                            Description = "Various festivals and celebrations",
                            Name = "Festivals"
                        },
                        new
                        {
                            Id = 8,
                            CategoryType = 8,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(4908),
                            Description = "Exhibitions and displays",
                            Name = "Exhibitions"
                        },
                        new
                        {
                            Id = 9,
                            CategoryType = 9,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(4909),
                            Description = "Professional conferences and seminars",
                            Name = "Conferences"
                        },
                        new
                        {
                            Id = 10,
                            CategoryType = 10,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(4910),
                            Description = "Educational workshops and training",
                            Name = "Workshops"
                        });
                });

            modelBuilder.Entity("Events.Models.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("SourceUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<TimeSpan?>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("SubCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("TicketUrl")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Date");

                    b.HasIndex("Status");

                    b.HasIndex("SubCategoryId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Events.Models.Entities.EventTag", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.HasKey("EventId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("EventTags");
                });

            modelBuilder.Entity("Events.Models.Entities.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("EnumValue")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ParentCategory")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategory");

                    b.HasIndex("ParentCategory", "EnumValue")
                        .IsUnique();

                    b.ToTable("SubCategories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5087),
                            Description = "Rock music events and concerts",
                            EnumValue = 1,
                            Name = "Rock",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5091),
                            Description = "Jazz performances and sessions",
                            EnumValue = 2,
                            Name = "Jazz",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5093),
                            Description = "Heavy metal and metal subgenres",
                            EnumValue = 3,
                            Name = "Metal",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5095),
                            Description = "Pop music events",
                            EnumValue = 4,
                            Name = "Pop",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5142),
                            Description = "Funk music events",
                            EnumValue = 5,
                            Name = "Funk",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5147),
                            Description = "Punk music events",
                            EnumValue = 6,
                            Name = "Punk",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5150),
                            Description = "Opera music events",
                            EnumValue = 7,
                            Name = "Opera",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5151),
                            Description = "Classical music concerts",
                            EnumValue = 8,
                            Name = "Classical",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5153),
                            Description = "Electronic music and DJ sets",
                            EnumValue = 9,
                            Name = "Electronic",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5156),
                            Description = "Folk and traditional music",
                            EnumValue = 10,
                            Name = "Folk",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5157),
                            Description = "Blues music performances",
                            EnumValue = 11,
                            Name = "Blues",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 12,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5160),
                            Description = "Country music events",
                            EnumValue = 12,
                            Name = "Country",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 13,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5163),
                            Description = "Reggae music events",
                            EnumValue = 13,
                            Name = "Reggae",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 14,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5165),
                            Description = "Hip-hop and rap events",
                            EnumValue = 14,
                            Name = "HipHop",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 15,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5168),
                            Description = "Alternative music events",
                            EnumValue = 15,
                            Name = "Alternative",
                            ParentCategory = 1
                        },
                        new
                        {
                            Id = 16,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5176),
                            Description = "Football matches and events",
                            EnumValue = 1,
                            Name = "Football",
                            ParentCategory = 4
                        },
                        new
                        {
                            Id = 17,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5178),
                            Description = "Basketball games and tournaments",
                            EnumValue = 2,
                            Name = "Basketball",
                            ParentCategory = 4
                        },
                        new
                        {
                            Id = 18,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5181),
                            Description = "Tennis matches and tournaments",
                            EnumValue = 3,
                            Name = "Tennis",
                            ParentCategory = 4
                        },
                        new
                        {
                            Id = 19,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5183),
                            Description = "Volleyball games",
                            EnumValue = 4,
                            Name = "Volleyball",
                            ParentCategory = 4
                        },
                        new
                        {
                            Id = 20,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5185),
                            Description = "Swimming competitions",
                            EnumValue = 5,
                            Name = "Swimming",
                            ParentCategory = 4
                        },
                        new
                        {
                            Id = 21,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5186),
                            Description = "Track and field events",
                            EnumValue = 6,
                            Name = "Athletics",
                            ParentCategory = 4
                        },
                        new
                        {
                            Id = 22,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5193),
                            Description = "Boxing events and competitions",
                            EnumValue = 7,
                            Name = "Boxing",
                            ParentCategory = 4
                        },
                        new
                        {
                            Id = 23,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5196),
                            Description = "Wrestling events and competitions",
                            EnumValue = 8,
                            Name = "Wrestling",
                            ParentCategory = 4
                        },
                        new
                        {
                            Id = 24,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5199),
                            Description = "Gymnastics events and competitions",
                            EnumValue = 9,
                            Name = "Gymnastics",
                            ParentCategory = 4
                        },
                        new
                        {
                            Id = 25,
                            CreatedAt = new DateTime(2025, 10, 9, 17, 50, 34, 183, DateTimeKind.Utc).AddTicks(5202),
                            Description = "Cycling events and competitions",
                            EnumValue = 10,
                            Name = "Cycling",
                            ParentCategory = 4
                        });
                });

            modelBuilder.Entity("Events.Models.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Category")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Events.Models.Entities.Event", b =>
                {
                    b.HasOne("Events.Models.Entities.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Events.Models.Entities.SubCategory", "SubCategory")
                        .WithMany("Events")
                        .HasForeignKey("SubCategoryId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Category");

                    b.Navigation("SubCategory");
                });

            modelBuilder.Entity("Events.Models.Entities.EventTag", b =>
                {
                    b.HasOne("Events.Models.Entities.Event", "Event")
                        .WithMany("EventTags")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Models.Entities.Tag", "Tag")
                        .WithMany("EventTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Events.Models.Entities.Event", b =>
                {
                    b.Navigation("EventTags");
                });

            modelBuilder.Entity("Events.Models.Entities.SubCategory", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Events.Models.Entities.Tag", b =>
                {
                    b.Navigation("EventTags");
                });
#pragma warning restore 612, 618
        }
    }
}
